from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder
import json
import asyncio

TOKEN = "7798013268:AAHUswLgDnMBR164Tc0IZlS92hs14ECkGvw"
bot = Bot(token=TOKEN)
dp = Dispatcher()


def load_cities():
    try:
        with open('cities.json', 'r', encoding='utf-8') as f:
            return json.load(f)['cities']
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")
        return []


CITIES = load_cities()


# ================== –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ==================
def make_start_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text="üöÄ –ù–∞—á–∞—Ç—å"))
    return builder.as_markup(resize_keyboard=True)


def make_main_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.add(
        KeyboardButton(text="üåç –ù–∞–π—Ç–∏ –≥–æ—Ä–æ–¥"),
        KeyboardButton(text="‚ú® –û –±–æ—Ç–µ")
    )
    return builder.as_markup(resize_keyboard=True)


def make_travel_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.add(
        KeyboardButton(text="üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫"),
        KeyboardButton(text="‚ú® –û –±–æ—Ç–µ")
    )
    return builder.as_markup(resize_keyboard=True)


# ================== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ==================
@dp.message(Command("start"))
async def start(message: types.Message):
    start_text = (
        "–ü—Ä–∏–≤–µ—Ç, –±—É–¥—É—â–∏–π –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫! üëã\n"
        "–Ø —Ç–≤–æ–π —Ü–∏—Ñ—Ä–æ–≤–æ–π –≥–∏–¥ –ø–æ –†–æ—Å—Å–∏–∏ üá∑üá∫\n\n"
        "–ì–æ—Ç–æ–≤ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –Ω–æ–≤—ã–µ –º–µ—Å—Ç–∞ –≤–º–µ—Å—Ç–µ? "
        "–ñ–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –ø–æ–≥–Ω–∞–ª–∏! ‚¨áÔ∏è"
    )
    await message.answer(start_text, reply_markup=make_start_keyboard())


@dp.message(F.text == "üöÄ –ù–∞—á–∞—Ç—å")
async def start_journey(message: types.Message):
    await message.answer(
        "–°—É–ø–µ—Ä! –î–∞–≤–∞–π —Å–¥–µ–ª–∞–µ–º —ç—Ç–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–º! üåü\n"
        "–ß—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
        reply_markup=make_main_keyboard()
    )


@dp.message(F.text == "‚ú® –û –±–æ—Ç–µ")
async def about(message: types.Message):
    text = (
        "üåü –Ø ‚Äî —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π!\n\n"
        "–í –º–æ–∏—Ö –∑–Ω–∞–Ω–∏—è—Ö:\n"
        "‚úÖ 15 –∫—Ä—É–ø–Ω–µ–π—à–∏—Ö –≥–æ—Ä–æ–¥–æ–≤ –†–æ—Å—Å–∏–∏\n"
        "‚úÖ –ù–∞—Å–µ–ª–µ–Ω–∏–µ –∏ —Ä–µ–≥–∏–æ–Ω—ã\n"
        "‚úÖ –¢–æ–ø–æ–≤—ã–µ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –≥–æ—Ä–æ–¥ ‚Äî –∏ —è —Ä–∞—Å—Å–∫–∞–∂—É –≤—Å—ë, —á—Ç–æ –∑–Ω–∞—é! üòâ"
    )
    await message.answer(text)


@dp.message(F.text == "üåç –ù–∞–π—Ç–∏ –≥–æ—Ä–æ–¥")
async def start_search(message: types.Message):
    await message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –ù–∞–ø–∏—à–∏ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞,\n"
        "–Ω–∞–ø—Ä–∏–º–µ—Ä: <i>–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥</i> –∏–ª–∏ <i>–ö–∞–∑–∞–Ω—å</i> üèô",
        reply_markup=make_travel_keyboard(),
        parse_mode="HTML"
    )


@dp.message(F.text)
async def handle_city(message: types.Message):
    city_name = message.text.strip().lower()
    found = False

    for city in CITIES:
        if city['name'].lower() == city_name:
            response = (
                    f"üåà <b>{city['name']}</b> ‚Äî –æ—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –í–æ—Ç —á—Ç–æ —è –∑–Ω–∞—é:\n\n"
                    f"üë®üë©üëßüë¶ <i>–ñ–∏—Ç–µ–ª–µ–π:</i> {city['population']}\n"
                    f"üó∫ <i>–†–µ–≥–∏–æ–Ω:</i> {city['region']}\n\n"
                    "üîù <u>–ì–ª–∞–≤–Ω—ã–µ –º–µ—Å—Ç–∞:</u>\n" +
                    "\n".join(f"‚ñ™Ô∏è {lm} üëÄ" for lm in city['landmarks'])
            )
            await message.answer(response, parse_mode="HTML")
            found = True
            break

    if not found:
        await message.answer(
            "–û–π-–æ–π üòØ –¢–∞–∫–æ–π –≥–æ—Ä–æ–¥ –º–Ω–µ –Ω–µ –∑–Ω–∞–∫–æ–º...\n"
            "–ü–æ–ø—Ä–æ–±—É–π —á—Ç–æ-—Ç–æ –∏–∑ —ç—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞:\n"
            "‚Ä¢ –ú–æ—Å–∫–≤–∞\n‚Ä¢ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥\n‚Ä¢ –ö–∞–∑–∞–Ω—å\n"
            "–ò–ª–∏ –ø—Ä–æ–≤–µ—Ä—å –Ω–∞–ø–∏—Å–∞–Ω–∏–µ üßê",
            parse_mode="HTML"
        )


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())